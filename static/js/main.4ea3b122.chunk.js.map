{"version":3,"sources":["WeatherStation.js","WeatherObservations.js","Login.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherStation","props","longitude","latitude","refreshIcon","icon","faRetweet","useState","units","setUnits","place","retrieved","conditions","visibility","visibilityUnit","temp","tempUnit","humidity","wind","windUnit","windDirection","windDirectionUnit","metricObservations","setMetricObservations","observations","setObservations","getCurrentObservations","a","fetch","response","json","currWeather","name","Date","toLocaleDateString","toLocaleTimeString","weather","main","Math","round","speed","deg","useEffect","switchToImperial","switchToMetric","className","onClick","type","id","stationId","htmlFor","WeatherObservations","stations","stationCount","stationsInfo","setStationsInfo","lgShow","setLgShow","input","setInput","downButtonIcon","faAngleDown","upButtonIcon","faAngleUp","deleteButtonIcon","faTrashAlt","addStationButtonIcon","faPlus","getLocSuccess","position","lat","coords","lon","getLocError","err","currentCount","setUserStations","getUserLocation","navigator","geolocation","getCurrentPosition","userDataJSON","localStorage","getItem","userStations","JSON","parse","weatherStations","length","count","addStation","newStation","stationData","hasOwnProperty","newStations","push","coord","setItem","stringify","password","alert","rows","i","stationIndex","splice","deleteWeatherStation","station","moveWeatherStationUp","moveWeatherStationDown","Modal","size","show","onHide","Header","closeButton","Title","Body","onChange","e","target","value","Login","isLoggedInSetter","loggedInState","setLoggedInState","email","accountCredentials","setAccountCredentials","changeHandler","App","isLoggedIn","setIsLoggedIn","wrapperSetIsLoggedIn","useCallback","val","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ea3b122.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome' \nimport { faRetweet } from '@fortawesome/free-solid-svg-icons'\n\n\nexport default function WeatherStation(props) {\n  const longitude = props.longitude;\n  const latitude = props.latitude;\n  const refreshIcon = <FontAwesomeIcon icon={faRetweet}></FontAwesomeIcon>\n\n  const [units, setUnits] = useState(\"metric\");\n\n  const [metricObservations, setMetricObservations] = useState({\n    place: \"\",\n    retrieved: \"\",\n    conditions: \"\",\n    visibility: \"\",\n    visibilityUnit: \"\",\n    temp: \"\",\n    tempUnit: \"\",\n    humidity: \"\",\n    wind: \"\",\n    windUnit: \"\",\n    windDirection: \"\",\n    windDirectionUnit: \"\",\n  });\n\n  const [observations, setObservations] = useState({\n    place: \"\",\n    retrieved: \"\",\n    conditions: \"\",\n    visibility: \"\",\n    visibilityUnit: \"\",\n    temp: \"\",\n    tempUnit: \"\",\n    humidity: \"\",\n    wind: \"\",\n    windUnit: \"\",\n    windDirection: \"\",\n    windDirectionUnit: \"\",\n  });\n\n  const getCurrentObservations = async () => {\n    const response = await fetch(\n      \"http://api.openweathermap.org/data/2.5/weather?lat=\" +\n        latitude +\n        \"&lon=\" +\n        longitude +\n        \"&appid=f763b34d246506fdbef713181cc24c56\"\n    );\n    const currWeather = await response.json();\n    if(units === \"metric\"){\n    setObservations({\n      place: currWeather.name,\n      retrieved:\n        new Date().toLocaleDateString() +\n        \" at \" +\n        new Date().toLocaleTimeString(),\n      conditions: currWeather.weather[0].main,\n      visibilityUnit: \"Meters\",\n      temp: Math.round(currWeather.main.temp - 273.15),\n      tempUnit: \"C\",\n      humidity: currWeather.main.humidity,\n      visibility: currWeather.visibility,\n      wind: currWeather.wind.speed,\n      windUnit: \"Meters/sec\",\n      windDirection: currWeather.wind.deg,\n      windDirectionUnit: \"Degrees\",\n    });} else {\n        setObservations({\n            place: currWeather.name,\n            retrieved:\n              new Date().toLocaleDateString() +\n              \" at \" +\n              new Date().toLocaleTimeString(),\n            conditions: currWeather.weather[0].main,\n            visibilityUnit: \"Feet\",\n            temp: Math.round((currWeather.main.temp - 273.15) * 9 / 5 + 32),\n            tempUnit: \"F\",\n            humidity: currWeather.main.humidity,\n            visibility: Math.round(currWeather.visibility * 3.281),\n            wind: Math.round(currWeather.wind.speed * 3.281),\n            windUnit: \"Feet/sec\",\n            windDirection: currWeather.wind.deg,\n            windDirectionUnit: \"Degrees\",\n          });\n    }\n    setMetricObservations({\n      place: currWeather.name,\n      retrieved:\n        new Date().toLocaleDateString() +\n        \" at \" +\n        new Date().toLocaleTimeString(),\n      conditions: currWeather.weather[0].main,\n      visibilityUnit: \"Meters\",\n      temp: Math.round(currWeather.main.temp - 273.15),\n      tempUnit: \"C\",\n      humidity: currWeather.main.humidity,\n      visibility: currWeather.visibility,\n      wind: currWeather.wind.speed,\n      windUnit: \"Meters/sec\",\n      windDirection: currWeather.wind.deg,\n      windDirectionUnit: \"Degrees\",\n    });\n  };\n\n\n  useEffect(() => {\n    getCurrentObservations();\n  }, []);\n\n  const toggleUnits = () => {units === \"imperial\" ? switchToMetric() : switchToImperial();}\n\n  const switchToImperial = () => {\n    setObservations({\n      ...observations,\n      tempUnit: \"F\",\n      temp: Math.round((observations.temp * 9) / 5 + 32),\n      visibility: Math.round(observations.visibility * 3.281),\n      visibilityUnit: \"Feet\",\n      wind: Math.round(observations.wind * 3.281),\n      windUnit: \"Feet/sec\",\n    });\n    setUnits(\"imperial\");\n  };\n\n  const switchToMetric = () => {\n    setObservations(metricObservations);\n    setUnits(\"metric\");\n  }\n\n  const refresh = async() => {\n    if(units === \"imperial\") {\n        getCurrentObservations()\n    } else {\n    }\n}\n\n  return (\n    <section className=\"jumbotron ws-centered ws-padding\">\n      <h1>Weather Conditions at {observations.place}</h1>\n      <p>\n  <i>Last updated: {observations.retrieved} <button onClick={getCurrentObservations}>{refreshIcon}</button></i>\n      </p>\n      <p>Conditions: {observations.conditions}</p>\n      <p>\n        Visibility:{\" \"}\n        {observations.visibility + \" \" + observations.visibilityUnit}\n      </p>\n      <p>\n        Temp: {observations.temp}&deg;&nbsp;{observations.tempUnit}\n      </p>\n      <p>Humidity: {observations.humidity}%</p>\n      <p>Wind Speed: {observations.wind + \" \" + observations.windUnit}</p>\n      <p>\n        Wind Direction:{\" \"}\n        {observations.windDirection + \" \" + observations.windDirectionUnit}\n      </p>\n      <div className=\"custom-control custom-switch\">\n        <input\n          type=\"checkbox\"\n          className=\"custom-control-input\"\n          id={\"switch-\" + props.stationId}\n          onClick={toggleUnits}\n        />\n        <label\n          className=\"custom-control-label\"\n          htmlFor={\"switch-\" + props.stationId}\n        >\n          &nbsp;&deg;{observations.tempUnit}\n        </label>\n      </div>\n    </section>\n  );\n}\n","import WeatherStation from \"./WeatherStation\";\nimport { useState, useEffect } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAngleDown, faAngleUp, faTrashAlt, faPlus } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function WeatherObservations() {\n\n  const [stationsInfo, setStationsInfo] = useState({\n    stations: [],\n    stationCount: 0,\n  });\n\n  const [lgShow, setLgShow] = useState(false);\n  const [input, setInput] = useState(\"\");\n\n  const downButtonIcon = <FontAwesomeIcon icon={faAngleDown}></FontAwesomeIcon>;\n  const upButtonIcon = <FontAwesomeIcon icon={faAngleUp}></FontAwesomeIcon>;\n  const deleteButtonIcon = <FontAwesomeIcon icon={faTrashAlt}></FontAwesomeIcon>;\n  const addStationButtonIcon = <FontAwesomeIcon icon={faPlus}></FontAwesomeIcon>;\n\n  const getLocSuccess = (position) => {\n    setStationsInfo({\n      stations: [\n        {\n          lat: position.coords.latitude,\n          lon: position.coords.longitude,\n          stationId: stationsInfo.stationCount + 1,\n        },\n      ],\n      stationCount: stationsInfo.stationCount + 1,\n    });\n  };\n\n  const getLocError = (err) => {\n    const currentCount = stationsInfo.stationCount;\n    setStationsInfo({\n      stations: [\n        {\n          lat: 47.61,\n          lon: -122.33,\n          stationId: currentCount + 1,\n        },\n      ],\n      stationCount: currentCount + 1,\n    });\n  };\n\n  useEffect(() => {\n    setUserStations();\n  }, []);\n\n  const getUserLocation = async () => {\n    await navigator.geolocation.getCurrentPosition(getLocSuccess, getLocError);\n  };\n\n  const setUserStations = () => {\n    const userDataJSON = localStorage.getItem('cody@gmail.com');\n    const userData = JSON.parse(userDataJSON);\n    const userStations = userData.weatherStations;\n    if(userStations.length >= 1){\n      const count = userStations[userStations.length - 1].stationId\n      setStationsInfo({\n        stations: userStations,\n        stationCount: count,\n      })\n    } else {\n      getUserLocation()\n    }\n  }\n\n  const addStation = async (newStation) => {\n    if (newStation != null) {\n      //Need to see if we can find the station through the API\n      const response = await fetch(\n        \"http://api.openweathermap.org/data/2.5/weather?q=\" +\n          newStation +\n          \"&appid=f763b34d246506fdbef713181cc24c56\"\n      );\n      const stationData = await response.json();\n      //See if the requested station exists\n      if (stationData != null && stationData.hasOwnProperty(\"coord\")) {\n        //Push new station into stations list and update state\n        let newStations = [...stationsInfo.stations];\n        const currentCount = stationsInfo.stationCount;\n        newStations.push({\n          lat: stationData.coord.lat,\n          lon: stationData.coord.lon,\n          stationId: currentCount + 1,\n        });\n        setStationsInfo({\n          stations: newStations,\n          stationCount: currentCount + 1,\n        });\n        localStorage.setItem('cody@gmail.com', JSON.stringify({\n          password: 'password123',\n          weatherStations: newStations}))\n      } else {\n        alert(\"Sorry, that weather location could not be found.\");\n      }\n    }\n    setLgShow(false);\n  };\n\n  const showDialog = () => {\n    setLgShow(true);\n  };\n\n  const deleteWeatherStation = (stationIndex) => {\n    const currentCount = stationsInfo.stationCount;\n    const newStations = [...stationsInfo.stations];\n    newStations.splice(stationIndex, stationIndex);\n    setStationsInfo({\n      stations: newStations,\n      stationCount: currentCount,\n    });\n    localStorage.setItem('cody@gmail.com', JSON.stringify({\n      password: 'password123',\n      weatherStations: newStations}))\n  };\n\n  const moveWeatherStationUp = (stationIndex) => {\n    if(stationIndex !== 0) {\n      const currentCount = stationsInfo.stationCount;\n      var newStations = [...stationsInfo.stations];\n      var station = newStations[stationIndex];\n      newStations[stationIndex] = newStations[stationIndex - 1];\n      newStations[stationIndex - 1] = station;\n\n      setStationsInfo({\n        stations: newStations,\n        stationCount: currentCount\n      })\n    }\n  }\n\n  const moveWeatherStationDown = (stationIndex) => {\n    if(stationIndex !== stationsInfo.stations.length - 1) {\n      const currentCount = stationsInfo.stationCount;\n      var newStations = [...stationsInfo.stations];\n      var station = newStations[stationIndex];\n      newStations[stationIndex] = newStations[stationIndex + 1];\n      newStations[stationIndex + 1] = station;\n\n      setStationsInfo({\n        stations: newStations,\n        stationCount: currentCount\n      })\n    }\n  }\n\n  let rows = [];\n  if (stationsInfo.stations.length !== 0) {\n    for (let i = 0; i < stationsInfo.stations.length; ++i) {\n      rows.push(\n        <div>\n          <WeatherStation\n            key={stationsInfo.stations[i].stationId}\n            latitude={stationsInfo.stations[i].lat}\n            longitude={stationsInfo.stations[i].lon}\n            stationId={stationsInfo.stations[i].stationId}\n          />\n          <button onClick={() => deleteWeatherStation(i)}>\n            {deleteButtonIcon}\n          </button>\n          <button onClick={() => moveWeatherStationUp(i)}>\n            {upButtonIcon}\n          </button>\n          <button onClick={() => moveWeatherStationDown(i)}>\n            {downButtonIcon}\n            </button>\n        </div>\n      );\n    }\n    return (\n      <div>\n        <Modal\n          size=\"lg\"\n          show={lgShow}\n          onHide={() => setLgShow(false)}\n          aria-labelledby=\"example-modal-sizes-title-lg\"\n        >\n          <Modal.Header closeButton>\n            <Modal.Title id=\"example-modal-sizes-title-lg\">\n              Enter a city, state, and country\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <input\n              type=\"text\"\n              onChange={(e) => {\n                setInput(e.target.value);\n              }}\n            ></input>\n            <button\n              id=\"button\"\n              onClick={() => {\n                addStation(input);\n              }}\n            >\n              Add\n            </button>\n          </Modal.Body>\n        </Modal>\n        {rows}\n        <button className=\"float\" id=\"addStationBtn\" onClick={showDialog}>\n          {addStationButtonIcon}\n        </button>\n      </div>\n    );\n  } else {\n    return <h1>no stations added</h1>;\n  }\n}\n","import {useState, useEffect} from 'react'\n\nexport default function Login({isLoggedInSetter}) {\n\n    const [loggedInState, setLoggedInState] = useState(false)\n\n    useEffect(() =>{\n        isLoggedInSetter(loggedInState);\n    }, [isLoggedInSetter, loggedInState])\n\n    const [accountCredentials, setAccountCredentials] = useState({\n        email: '',\n        password: '',\n    });\n\n    const changeHandler = (e) => {\n        setAccountCredentials({...accountCredentials, [e.target.name]: e.target.value});\n    }\n\n    const login = () => {\n        const json = localStorage.getItem(accountCredentials.email)\n        if (json !== null) {\n            const userPassword = JSON.parse(json).password;\n            if (userPassword === accountCredentials.password){\n                setLoggedInState(true)\n            } else {\n                alert(\"email or password incorrect\")\n            }\n        } else {\n            alert(\"email or password incorrect\")\n        }\n    }\n    const createAccount = () => {\n        const data = {password: 'password123', weatherStations: []}\n        const json = JSON.stringify(data)\n        localStorage.setItem('cody@gmail.com', json)\n        alert(\"account created\\nemail: cody@gmail.com\\npassword: password123\")\n    }\n\n    return (\n        <div className=\"login-page-container\">\n            <h1>Log In</h1>\n            email:\n            <input\n                className=\"form-input\"\n                type=\"email\"\n                name=\"email\"\n                onChange={changeHandler}\n                value={accountCredentials.email}\n            /><br/>\n            password:\n            <input \n                className=\"form-input\"\n                type=\"password\"\n                name=\"password\"\n                onChange={changeHandler}\n                value={accountCredentials.password}\n            /><br/>\n            <button className=\"form-input\" onClick={login}>login</button><br/>\n            <button className='form-input' onClick={createAccount}>create account</button>\n        </div>\n    )\n}","import \"./App.css\";\nimport WeatherObservations from \"./WeatherObservations\";\nimport Login from \"./Login\";\nimport { useState, useCallback } from \"react\";\n//import 'bootstrap/dist/css/bootstrap.min.css'\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  const wrapperSetIsLoggedIn = useCallback(\n    (val) => {\n      setIsLoggedIn(val);\n    },\n    [setIsLoggedIn]\n  );\n\n  const signout = () => {\n    setIsLoggedIn(false);\n  }\n\n  return (\n    <div className=\"App\">\n      {isLoggedIn ? (\n        <div>\n        <WeatherObservations />\n        <button \n          className=\"signout\"\n          onClick={signout}\n          >\n            sign out</button>\n        </div>\n      ) : (\n        <Login\n          isLoggedIn={isLoggedIn}\n          isLoggedInSetter={wrapperSetIsLoggedIn}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}